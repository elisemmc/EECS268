1. We want to minimize the height of a binary tree because by minimizing the height of the tree we can minimize the maximum time it takes for a traversal of the tree.  The worst case of a binary tree that is not balanced is O(n), but if the trees height has been minimized the worst case is O(log2n).  This is beneficial because it minimizes the time it takes to find an element.
2.First check that each node has no more than two children. Then recursively check(starting at the root node) that the left child of the node is less than the item of the node and that the right child is greater.  Then you call this same check for each child of the node.  This will continue until it hits a node that has no children.
3.For the unbalanced tree the worst case is O(n) because at this point it is a linked list, but if the tree has been balanced, the worst case is O(log2n) (because for each check it eliminates half of the possibilities of the nodes location)
